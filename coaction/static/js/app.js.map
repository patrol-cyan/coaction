{"version":3,"sources":["app.js","tasks/edit-task-controller.js","tasks/new-task-controller.js","tasks/task.js","tasks/tasks-controller.js","errors/404/error-404-controller.js","tasks/services/tasks-service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// Declare our app module, and import the ngRoute and ngAnimate\n// modules into it.\nvar app = angular.module('app', ['ngRoute']);\n\n// Set up our 404 handler\napp.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.otherwise({\n    controller: 'Error404Ctrl',\n    controllerAs: 'vm',\n    templateUrl: 'static/errors/404/error-404.html'\n  });\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: '/static/tasks/new-task.html',\n    controller: 'EditTaskCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      task: ['tasksService', '$route', function (tasksService, $route) {\n        return tasksService.getTask($route.current.params.taskId);\n      }],\n    }\n  };\n\n  $routeProvider.when('/tasks/:taskId/edit', routeDefinition)\n}])\n.controller('EditTaskCtrl', ['tasksService', 'task', '$location', function (tasksService, task, $location) {\n  var self = this;\n\n  self.title = 'Edit Task';//in order to change html elements for edit view\n\n  self.saveText = 'Save Task';\n\n  self.task = task;\n\n  self.saveTask = function () {\n    tasksService.updateTask(self.task).then(self.goToTasks);\n\n  };\n\n  self.goToTasks = function () {\n    $location.path('/tasks');\n  };\n\n  self.cancelTaskEdit = function () {\n    self.goToTasks();\n  };\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: '/static/tasks/new-task.html',\n    controller: 'NewTaskCtrl',\n    controllerAs: 'vm',\n    // resolve: {\n    //   tasks: ['tasksService', function (tasksService) {\n    //     return tasksService.addTask();\n    //   }],\n    // }\n  };\n\n  $routeProvider.when('/tasks/new', routeDefinition)\n}])\n.controller('NewTaskCtrl', ['tasksService', 'Task', '$location', function (tasksService, Task, $location) {\n  var self = this;\n\n  self.title = 'New Task';//in order to change html elements for edit view\n\n  self.saveText = 'Create Task';\n\n  self.task = Task();\n\n  self.saveTask = function () {\n    tasksService.addTask(self.task).then(self.goToTasks);\n\n  };\n\n  self.goToTasks = function () {\n    $location.path('/tasks');\n  };\n\n  self.cancelTaskEdit = function () {\n    self.goToTasks();\n  };\n\n}]);\n","app.factory('Task', [ function() {\n\n  return function(spec) {\n    spec = spec || {};\n\n    var self = {\n      assignee: spec.assignee,\n      completion_status: spec.completionStatus,\n      description: spec.description,\n      due_date: spec.dueDate,\n      id: spec.taskId,\n      owner: spec.userId,\n      started_status: spec.startedStatus || 'new',\n      status: spec.status,\n      title: spec.title,\n      comments: spec.comments || []\n      //not sure if this will work with how\n      //they're setting up the comment class\n\n    };\n\n    return self;\n  };\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: '/static/tasks/tasks.html',\n    controller: 'TasksCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      tasks: ['tasksService', function (tasksService) {\n        return tasksService.list();\n      }],\n    }\n  };\n\n  $routeProvider.when('/', routeDefinition)\n    .when('/tasks', routeDefinition);\n}])\n.controller('TasksCtrl', ['tasks', function (tasks) {\n  var self = this;\n\n  self.tasks = tasks;\n}]);\n\n\n// app.config(['$routeProvider', function($routeProvider) {\n//   var routeDefinition = {\n//     templateUrl: 'shares/shares.html',\n//     controller: 'SharesCtrl',\n//     controllerAs: 'vm',\n//     resolve: {\n//       shares: ['shareService', function (shareService) {\n//         return shareService.getShareList();\n//       }]\n//     //   upvotes: ['voteService', function (voteService) {\n//     //     return VoteService.upvote();\n//     //   }],\n//     //   downvotes: ['voteService', function (voteService) {\n//     //     return VoteService.downvote();\n//     // }\n//   }\n// };\n//   $routeProvider.when('/', routeDefinition);\n//   $routeProvider.when('/shares', routeDefinition);\n// }])\n// .controller('SharesCtrl', ['$location', 'shares', 'shareService', 'Share', 'voteService', function ($location, shares, shareService, Share, voteService) {\n//\n//\n// var self = this;\n//\n//   self.shares = shares;\n//   // self.votes = function (upvote, downvote) {\n//   //   return votes = upvotes - downvotes;\n//   // };\n//\n//   self.upvote = function (share) {\n//     voteService.upvote(share);\n//   };\n//\n//   self.downvote = function (share) {\n//     voteService.downvote(share);\n//   };\n//\n//   self.goToComments = function(share) {\n//     $location.path('/shares/' + share._id + '/comments');\n//   };\n//\n//\n// }]);\n","app.controller('Error404Ctrl', ['$location', function ($location) {\n  this.message = 'Could not find: ' + $location.url();\n}]);\n","\napp.factory('tasksService', ['$http', '$log', '$location', function($http, $log, $location) {\n\n  function get(url) {\n      return processAjaxPromise($http.get(url));\n  }\n\n  function post(url, task) {\n    var p = $http.post(url, task);\n    return processAjaxPromise();\n  }\n\n  function put(url, task) {\n    return processAjaxPromise($http.put(url, task));\n  }\n\n  function remove(url) {\n    return processAjaxPromise($http.delete(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      if (error.status === 401) {\n        // We're not logged in..!!!\n        $location.path('/login');\n      }\n      $log.log(error);\n    });\n  }\n\n\n  var self = {\n    list: function () {\n      return get('/api/tasks').then(function (data) {\n        return data.tasks;\n      });\n    },\n\n    addTask: function (task) {\n      return post('/api/tasks', task);\n    },\n\n    updateTask: function (task) {\n      return put('/api/tasks/' + task.id, task);\n    },\n\n    getTask: function (id) {\n      // id = Number(id);\n      // return self.list().then(function (tasks) {\n      //   for (var i = 0; i < tasks.length; i++) {\n      //     if (tasks[i].id === id) {\n      //       return tasks[i];\n      //     }\n      //   }\n      // });\n      //will remove what's above this when they fix api\n      return get('/api/tasks/' + id);\n    },\n\n    deleteTask: function (id) {\n      return remove('/api/tasks/' + id);\n    }\n  };\n\n  return self;\n}]);\n"],"sourceRoot":"/source/"}