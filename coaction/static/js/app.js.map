{"version":3,"sources":["app.js","nav/main-nav-controller.js","register/register-controller.js","tasks/edit-task-controller.js","tasks/new-task-controller.js","tasks/task.js","tasks/tasks-controller.js","users/user-controller.js","users/user.js","errors/404/error-404-controller.js","tasks/services/tasks-service.js","users/services/users-service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxfile":"app.js","sourcesContent":["// Declare our app module, and import the ngRoute and ngAnimate\n// modules into it.\nvar app = angular.module('app', ['ngRoute']);\n\n// Set up our 404 handler\napp.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.otherwise({\n    controller: 'Error404Ctrl',\n    controllerAs: 'vm',\n    templateUrl: 'static/errors/404/error-404.html'\n  });\n}]);\n","app.controller('MainNavCtrl',\n  ['$location', 'StringUtil', function($location, StringUtil) {\n    var self = this;\n\n    self.isActive = function (path) {\n      // The default route is a special case.\n      if (path === '/') {\n        return $location.path() === '/';\n      }\n\n      return StringUtil.startsWith($location.path(), path);\n    };\n  }]);\n  \n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/register/register.html',\n    controller: 'RegisterCtrl',\n    controllerAs: 'vm'\n    // resolve: {\n    //   users: ['usersService', function (usersService) {\n    //     return usersService.list();\n    //   }]\n    // }\n  };\n\n  $routeProvider.when('/register', routeDefinition);\n}])\n.controller('RegisterCtrl', ['$location', 'usersService', 'User', function ($location, usersService, User) {\n  var self = this;\n\n  self.message = null;\n\n  self.newUser = User();\n  console.log(self.newUser);\n\n  self.addUser = function () {\n    usersService.addUser(self.newUser).then(function (data) {\n      console.log(data)\n      if (typeof data.message === 'undefined') {\n        self.goToTasks();\n      } else {\n        self.message = data.message;\n      }\n    });\n  };\n\n  self.goToTasks = function () {\n    console.log('goToTasks')\n    // $location.path('/tasks');\n  };\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: '/static/tasks/new-task.html',\n    controller: 'EditTaskCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      task: ['tasksService', '$route', function (tasksService, $route) {\n        return tasksService.getTask($route.current.params.taskId);\n      }],\n    }\n  };\n\n  $routeProvider.when('/tasks/:taskId/edit', routeDefinition)\n}])\n.controller('EditTaskCtrl', ['tasksService', 'task', '$location', function (tasksService, task, $location) {\n  var self = this;\n\n  self.title = 'Edit Task';//in order to change html elements for edit view\n\n  self.saveText = 'Save Task';\n\n  self.task = task;\n\n  self.saveTask = function () {\n    tasksService.updateTask(self.task).then(self.goToTasks);\n  };\n\n  self.deleteTask = function () {\n    tasksService.deleteTask(self.task).then(self.goToTasks);\n  };\n\n  self.goToTasks = function () {\n    $location.path('/tasks');\n  };\n\n  self.cancelTaskEdit = function () {\n    self.goToTasks();\n  };\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: '/static/tasks/new-task.html',\n    controller: 'NewTaskCtrl',\n    controllerAs: 'vm',\n  };\n\n  $routeProvider.when('/tasks/new', routeDefinition)\n}])\n.controller('NewTaskCtrl', ['tasksService', 'Task', '$location', function (tasksService, Task, $location) {\n  var self = this;\n\n  self.title = 'New Task';//in order to change html elements for edit view\n\n  self.saveText = 'Create Task';\n\n  self.task = Task();\n\n  self.saveTask = function () {\n    tasksService.addTask(self.task).then(self.goToTasks);\n  };\n\n  self.goToTasks = function () {\n    $location.path('/tasks');\n  };\n\n  self.cancelTaskEdit = function () {\n    self.goToTasks();\n  };\n\n}]);\n","app.factory('Task', [ function() {\n\n  return function(spec) {\n    spec = spec || {};\n\n    var self = {\n      assignee: spec.assignee || null,\n      completion_status: spec.completionStatus,\n      description: spec.description,\n      due_date: spec.dueDate || null,\n      id: spec.taskId,\n      owner: spec.userId,\n      started_status: spec.startedStatus,\n      status: spec.status || \"TODO\",\n      title: spec.title || null,\n      // comments: spec.comments || []\n      //not sure if this will work with how\n      //they're setting up the comment class\n\n    };\n\n    return self;\n  };\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: '/static/tasks/tasks.html',\n    controller: 'TasksCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      tasks: ['tasksService', function (tasksService) {\n        return tasksService.list();\n      }],\n    }\n  };\n\n  $routeProvider.when('/', routeDefinition)\n    .when('/tasks', routeDefinition);\n}])\n.controller('TasksCtrl', ['$location', 'tasks', 'usersService', function ($location, tasks, usersService) {\n  var self = this;\n\n  self.tasks = tasks;\n\n  self.user = usersService.getCurrentUser();\n\n  self.user.then(function (user) {\n    if (typeof user.email === 'undefined') {\n      $location.path('/register');\n    }\n  })\n}]);\n","// app.config(['$routeProvider', function($routeProvider) {\n//   var routeDefinition = {\n//     templateUrl: 'users/user.html',\n//     controller: 'UserCtrl',\n//     controllerAs: 'vm',\n//     resolve: {\n//       user: ['$route', 'usersService', function ($route, usersService) {\n//         var routeParams = $route.current.params;\n//         return usersService.getByUserId(routeParams.userid);\n//       }],\n//       github: ['$route', '$http', function ($route, $http) {\n//         var routeParams = $route.current.params;\n//         return $http.get('https://api.github.com/users/' + routeParams.userid);\n//       }]\n//     }\n//   };\n//\n//   $routeProvider.when('/users/:userid', routeDefinition);\n// }])\n// .controller('UserCtrl', ['user', 'github', function (user, github) {\n//   this.user = user;\n//   this.github = github.data;\n//   console.log(this.github);\n// }]);\n","app.factory('User', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      name: spec.name,\n      email: spec.email,\n      password: spec.password,\n      password_verification: spec.password_verification\n    };\n  };\n});\n","app.controller('Error404Ctrl', ['$location', function ($location) {\n  this.message = 'Could not find: ' + $location.url();\n}]);\n","app.factory('tasksService', ['$http', '$log', '$location', function($http, $log, $location) {\n\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function post(url, task) {\n    return processAjaxPromise($http.post(url, task));\n  }\n\n  function put(url, task) {\n    return processAjaxPromise($http.put(url, task));\n  }\n\n  function remove(url) {\n    return processAjaxPromise($http.delete(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      if (error.status === 401) {\n        // We're not logged in..!!!\n        $location.path('/login');\n      }\n      $log.log(error);\n    });\n  }\n\n\n  var self = {\n    list: function () {\n      return get('/api/tasks').then(function (data) {\n        return data.tasks;\n      });\n    },\n\n    addTask: function (task) {\n      return post('/api/tasks', task);\n    },\n\n    updateTask: function (task) {\n      return put('/api/tasks/' + task.id, task);\n    },\n\n    getTask: function (id) {\n      return get('/api/tasks/' + id);\n    },\n\n    deleteTask: function (task) {\n      return remove('/api/tasks/' + task.id, task);\n    }\n  };\n\n  return self;\n}]);\n","app.factory('usersService', ['$http', '$log', '$location', function($http, $log, $location) {\n\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function post(url, task) {\n    return processAjaxPromise($http.post(url, user));\n  }\n\n  function put(url, task) {\n    return processAjaxPromise($http.put(url, user));\n  }\n\n  function remove(url) {\n    return processAjaxPromise($http.delete(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      if (error.status === 401) {\n        // We're not logged in..!!!\n        $location.path('/login');\n      }\n      $log.log(error);\n    });\n  }\n\n\n  return {\n    // list: function () {\n    //   return ajaxHelper.call($http.get('/api/users'));\n    // },\n\n    // getByUserId: function (userId) {\n    //   if (!userId) {\n    //     throw new Error('getByUserId requires a user id');\n    //   }\n    //\n    //   return ajaxHelper.call($http.get('/api/users/' + userId));\n    // },\n\n    addUser: function (user) {\n      return post('/api/register', user);\n    },\n\n    getCurrentUser: function() {\n      return get('/api/users/current');\n    },\n\n    logIn: function (user) {\n      return post('/api/login', user);\n    },\n\n    logOut: function (user) {\n      return post('/api/logout', user);\n    }\n\n  };\n}]);\n"],"sourceRoot":"/source/"}